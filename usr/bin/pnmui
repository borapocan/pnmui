#!/bin/sh

# Import current theme
DIR="$pOS_CONFIG_DIR/pnmui";
source "$DIR/themes.config";
main_theme="$themes/$style";
edit_connection_theme="$DIR/themes/edit_connection/edit_connection.rasi";
edit_connection_add_theme="$DIR/themes/edit_connection/edit_connection_add.rasi";
activate_connection_theme="$DIR/themes/activate_connection/activate_connection.rasi";
activate_connection_password_theme="$DIR/themes/activate_connection/activate_connection_password.rasi";
manually_activate_connection_theme="$DIR/themes/manually_activate_connection/manually_activate_connection.rasi";
manually_activate_connection_ssid_theme="$DIR/themes/manually_activate_connection/manually_activate_connection_ssid.rasi";
manually_activate_connection_psk_theme="$DIR/themes/manually_activate_connection/manually_activate_connection_psk.rasi";
connect_with_qr_code_theme="$DIR/themes/connect_with_qr_code/connect_with_qr_code.rasi";
set_system_hostname_theme="$DIR/themes/set_system_hostname/set_system_hostname.rasi";
access_points_theme="$DIR/themes/access_points/access_points.rasi";
access_point_name_theme="$DIR/themes/access_points/access_point_name.rasi";
list_ports_theme="$DIR/themes/list_ports/list_ports.rasi";
list_add_delete_neighbours_theme="$DIR/themes/list_add_delete_neighbours/list_add_delete_neighbours.rasi";
ssh_launcher_theme="$DIR/themes/ssh_launcher/ssh_launcher.rasi";
ssh_launcher_user_theme="$DIR/themes/ssh_launcher/ssh_launcher_user.rasi";
ssh_launcher_destination_theme="$DIR/themes/ssh_launcher/ssh_launcher_destination.rasi";
ssh_launcher_password_theme="$DIR/themes/ssh_launcher/ssh_launcher_password.rasi";
ssh_launcher_port_theme="$DIR/themes/ssh_launcher/ssh_launcher_port.rasi";
ssh_launcher_identity_file_theme="$DIR/themes/ssh_launcher/ssh_launcher_identity_file.rasi";
system_connections_folder="/etc/PhynetManager/system-connections";
icons="$DIR/icons"
cache_path="/var/lib/PhynetManager";
mkdir -p "${cache_path}/qr_codes" 2>/dev/null;

option_1="Edit a connection";
option_2="Activate an connection";
option_3="Manually activate an connection";
option_4="Connect Wi-Fi with QR code";
option_5="Set system hostname";
option_6="Create Access Point";
option_7="List open/closed/listening ports";
option_8="List/add neighbours";
option_9="List all available interfaces";
option_10="SSH launcher";
option_11="Exit";

[ $UID -ne 0 ] && echo "Please run script as root..." && exit 1;

network_interfaces=($(ls /sys/class/net));
wireless_interfaces=();
wireless_adapter_interfaces=();
wired_interfaces=();
wireless_interface="$(cat /proc/net/wireless | awk '{print $1}' | tail -1 | cut -d ':' -f1)";

for interface in "${network_interfaces[@]}"; do
    if [[ "${interface}" =~ "en" ]] || [[ "${interface}" =~ "et" ]]; then
        wired_interfaces+=("${interface}");
    elif [[ "${interface}" =~ "wl" ]]; then
        if [[ "$(grep -r "DEVTYPE" "/sys/class/net/${interface}/device/uevent" | cut -d '=' -f2)" = "usb_interface" ]]; then
            wireless_adapter_interfaces+=("${interface}");
        else
            wireless_interfaces+=("${interface}");
        fi
    else
        continue;
    fi
done

# Main menu
function menu() {
    echo -e "$option_1\n$option_2\n$option_3\n$option_4\n$option_5\n$option_6\n$option_7\n$option_8\n$option_9\n$option_10\n$option_11" | rofi -dmenu -theme ${main_theme};
}

# OPTION 1
function edit_connection() {

    [ -s "${cache_path}/connected_ssids" ] && rm -rf "${cache_path}/connected_ssids";
    echo -en "***** Wired *****\n" > "${cache_path}/connected_ssids";
    for wired in "${wired_interfaces[@]}"; do
        no=1;
        if [ "$(cat /sys/class/net/${wired}/carrier)" == "1" ]; then
            echo "Connected: Wired Connection ${no}" >> "${cache_path}/connected_ssids";
            no=$((no+1));
        else
            echo "Wired Connection ${no}" >> "${cache_path}/connected_ssids" 2>/dev/null;
        fi
    done
    echo -en "***** Wireless *****\n<Add>\n" >> ${cache_path}/connected_ssids;
    grep -R 'ssid=' /etc/PhynetManager/system-connections | cut -d '=' -f2 | sort | uniq >> "${cache_path}/connected_ssids";
    echo "<Back>" >> "${cache_path}/connected_ssids";
    cat "${cache_path}/connected_ssids" > "${cache_path}/edit_connection";
    cat "${cache_path}/connected_ssids" | rofi -window-title "Edit a connection" -dmenu -theme ${edit_connection_theme};

}

# OPTION 1-1
function edit_connection_add() {
    echo -e "DSL\nEthernet\nInfiniBand\nWi-Fi\nBond\nBridge\nIP Tunnel\nTeam\nVeth\nWireGuard\n<Cancel>" | rofi -window-title "New Connection" -dmenu -theme ${edit_connection_add_theme};
}

# OPTION 2
function activate_connection() {

    [ -s "${cache_path}/connected_ssids_ethernet" ] && rm -rf ${cache_path}/connected_ssids_ethernet;
    [ -s "${cache_path}/scanned_ssids_wifi" ] && rm -rf ${cache_path}/scanned_ssids_wifi;
    [ -s "${cache_path}/scanned_ssids_adapter" ] && rm -rf ${cache_path}/scanned_ssids_adapter*;
    [ -s "${cache_path}/activate_connection" ] && rm -rf ${cache_path}/activate_connection;

    echo -en "***** Wired *****\n" > "${cache_path}/connected_ssids_ethernet";
    no=1;
    for wired in "${wired_interfaces[@]}"; do
        if [ "$(cat /sys/class/net/${wired}/carrier)" == "1" ]; then
            echo "Connected: Wired Connection ${no}" >> "${cache_path}/connected_ssids_ethernet";
            no=$((no+1));
        else
            echo "Wired Connection ${no}" >> "${cache_path}/connected_ssids_ethernet" 2>/dev/null;
        fi
    done

    for wireless in "${wireless_interfaces[@]}"; do
        iw dev "${wireless}" scan 2>/dev/null | grep -oP "(?<=SSID:).*" | sort | uniq | awk 'NF' >> "/${cache_path}/scanned_ssids_wifi";
        state="$(iwconfig 2>/dev/null | grep "${wireless}" | grep -oP "(?<=ESSID:).*")";
        if [[ "${state}" != "off/any" ]]; then
            connected_network="$(echo ${state} | tr -d '"')";
            sed -i "1s/^/Connected:${connected_network}\n/" "${cache_path}/scanned_ssids_wifi" 2>/dev/null;
        fi
        sed -i "s/$/ Interface:${wireless}/" "${cache_path}/scanned_ssids_wifi";
        sed -i "1s/^/***** Wi-Fi *****\n/" "${cache_path}/scanned_ssids_wifi" 2>/dev/null;
    done

    if [[ "${#wireless_adapter_interfaces[@]}" -eq 1 ]]; then
        iw dev "${wireless_adapter_interfaces}" scan 2>/dev/null | grep -oP "(?<=SSID:).*" | sort | uniq | awk 'NF' >> "/${cache_path}/scanned_ssids_adapter";
        state="$(iwconfig 2>/dev/null | grep "${wireless_adapter_interfaces}" | grep -oP "(?<=ESSID:).*")";
        if [[ "${state}" != "off/any" ]]; then
            connected_network="$(echo ${state} | tr -d '"')";
            sed -i "1s/^/Connected:${connected_network}\n/" "${cache_path}/scanned_ssids_adapter" 2>/dev/null;
        fi
        sed -i "s/$/ Interface:${wireless_adapter_interfaces}/" "${cache_path}/scanned_ssids_adapter";
        sed -i "1s/^/***** USB Wi-Fi *****\n/" "${cache_path}/scanned_ssids_adapter" 2>/dev/null;
    else
        no=1;
        for wireless_adapter in "${wireless_adapter_interfaces[@]}"; do
            iw dev "${wireless_adapter}" scan 2>/dev/null | grep -oP "(?<=SSID:).*" | sort | uniq | awk 'NF' >> "${cache_path}/scanned_ssids_adapter${no}";
            state="$(iwconfig 2>/dev/null | grep "${wireless_adapter}" | grep -oP "(?<=ESSID:).*")";
            if [[ "${state}" != "off/any" ]]; then
                connected_network="$(echo ${state} | tr -d '"')";
                sed -i "1s/^/Connected:${connected_network}\n/" "${cache_path}/scanned_ssids_adapter${no}" 2>/dev/null;
            fi
            sed -i "s/$/ Interface:${wireless_adapter}/" "${cache_path}/scanned_ssids_adapter${no}";
            sed -i "1s/^/***** USB Wi-Fi ${no} *****\n/" "${cache_path}/scanned_ssids_adapter${no}" 2>/dev/null;
            cat "${cache_path}/scanned_ssids_adapter${no}" >> "${cache_path}/scanned_ssids_adapter";
            no=$((no+1));
        done
    fi

    cat "${cache_path}/connected_ssids_ethernet" "${cache_path}/scanned_ssids_wifi" "${cache_path}/scanned_ssids_adapter" > "${cache_path}/activate_connection" 2>/dev/null;
    echo "<Back>" >> "${cache_path}/activate_connection";
    sed -i 's|^[ \t]*||' "${cache_path}/activate_connection" 2>/dev/null;
    cat "${cache_path}/activate_connection" | rofi -window-title "Activate a connection" -dmenu -theme ${activate_connection_theme};
}

# OPTION 3
function manually_activate_connection() {
    local ssid="$(rofi -dmenu -theme ${manually_activate_connection_ssid_theme})";
    local prompt_ssid="$(echo -e "Yes\nNo" | rofi -window-title "Are you sure?" -dmenu -theme ${manually_activate_connection_theme})";
    case "${prompt_ssid}" in
        "Yes")
            local psk="$(rofi -dmenu -theme ${manually_activate_connection_psk_theme})";
            local prompt_psk="$(echo -e "Yes\nNo" | rofi -window-title "Are you sure?" -dmenu -theme ${manually_activate_connection_theme})";
            case "${prompt_psk}" in
                "Yes")
                     if [[ ${#psk} -lt 8 ]] || [[ ${#psk} -gt 63 ]]; then
                        no_connection="$(echo -e "Back" | rofi \
                            -window-title "Passphrase must be between 8 and 63 characters." \
                            -theme-str "window {width: 520px;}" \
		                    -theme-str "listview {columns: 1; lines: 5;}" \
		                    -dmenu \
		                    -markup-rows \
                            -theme ${manually_activate_connection_theme})";
                        exec "$0";
                    fi
                    if [ ${#wireless_adapter_interfaces[@]} -eq 0 ]; then
                        case `grep -r "ssid=\"${ssid}\"" "/etc/wpa_supplicant" >/dev/null; echo $?` in
                                0)  # In /etc/wpa_supplicant/
                                    # NEW: Also check if ssid is new scan
                                    WPA_CONF_FILE="$(grep -r "${ssid}" "/etc/wpa_supplicant" | awk "{print $1}" | cut -d ':' -f1)";
                                    wpa_supplicant -B -i "${wireless_interfaces}" -c "${WPA_CONF_FILE}" &>/dev/null; disown &>/dev/null;
                                    dhclient "${wireless_interfaces}" 2>/dev/null;
                                    dbus-launch notify-send "${ssid}" -i "${icons}/network-wireless-connected-100.svg" 'Connection Successful';
                                    exec "$0";
                                ;;
                                1)  # Not in /etc/wpa_supplicant/
                                    local NEW_WPA_CONF_FILE="$(mktemp -q "/tmp/wpa_supplicant_PhynetManager_${ssid}_XXXX.conf")";
                                    wpa_passphrase "${ssid}" "${psk}" > "${NEW_WPA_CONF_FILE}";
                                    wpa_supplicant -B -i "${wireless_interfaces}" -c "${NEW_WPA_CONF_FILE}" &>/dev/null; disown &>/dev/null;
                                    dhclient "${wireless_interfaces}" 2>/dev/null;
                                    dbus-launch notify-send "${ssid}" -i "${icons}/network-wireless-connected-100.svg" 'Connection Successful';
                                    exec "$0";
                                ;;
                        esac
                    else
                        selected_interface="$(echo "${wireless_interfaces[@]} ${wireless_adapter_interfaces[@]}" | tr " " "\n" | rofi -window-title "Select an interface:" -dmenu -theme ${manually_activate_connection_theme})";

                    fi

                ;;
                "No")
                    exec "$0";
                ;;
                *)
                    exec "$0";
            esac
        ;;
        "No")
            exec "$0";
        ;;
        *)
            exec "$0";
        ;;
    esac
}

# OPTION 4
function connect_with_QR_Code() {

    local SSID="$(iwconfig 2>/dev/null | grep -oP "(?<=ESSID:).*" | tr -d '"')";

    if [[ "${SSID}" == "off/any" ]]; then

        no_connection="$(echo -e "Back" | rofi \
        -window-title "No connection" \
        -theme-str "window {width: 520px;}" \
		-theme-str "listview {columns: 1; lines: 5;}" \
		-dmenu \
		-markup-rows \
        -theme ${connect_with_qr_code_theme})";

        case "${no_connection}" in

            "Back")

                exec "$0";

            ;;

        esac

    fi

    local ssid_path="$(grep -r "ssid=${ssid}" "/etc/PhynetManager/system-connections" | cut -d ':' -f1)";
    local PSK="$(grep "psk=" "${ssid_path}" | cut -d '=' -f2)";
    local Security="WPA";
    local RANDOM_QR_FILE="$(mktemp -q '${cache_path}/qr_codes/qr_code_${SSID}_XXXX.png')";
    qrencode -t png "WIFI:T:${Security};S:${SSID};P:${PSK};;" -o $RANDOM_QR_FILE;

    case `grep -oP 'url\("\K[^")]+' "$pOS_CONFIG_DIR/pnmui/themes/connect_with_qr_code/connect_with_qr_code.rasi" >/dev/null; echo "$?"` in

        0)  # Can be blank or filled with path inside background image: url(" ")
            url="$(grep -oP 'url\("\K[^")]+'  $pOS_CONFIG_DIR/pnmui/themes/connect_with_qr_code/connect_with_qr_code.rasi)";
        ;;

        1)  # No string or whitespace inside background image: url(" ")
            echo "Fill with ${RANDOM_QR_FILE}";
        ;;

    esac

    #OLD_URL="$(grep -oP 'url\("\K[^")]+' ./connect_with_qr_code.rasi)";
    #NEW_URL="$(realpath ${RANDOM_QR_FILE})"
    #perl -pi -e 's|"${OLD_URL}"|"${NEW_URL}"|g' $connect_with_qr_code_theme;
    #echo "qrfile: $RANDOM_QR_FILE";
    #echo "old file: $OLD_URL";
    #echo "new file: $NEW_URL";
    #rofi \
    #    -dmenu \
    #    -theme ./style-2.rasi;

	echo -e "SSID:$SSID\nSecurity:$Security\nPSK:$PSK" | rofi \
        -window-title "Share your connection" \
        -theme-str "window {width: 520px;}" \
		-theme-str "listview {columns: 1; lines: 5;}" \
		-dmenu \
		-markup-rows \
		-theme ${connect_with_qr_code_theme};
}

# OPTION 5
function set_system_hostname() {
    # Assign to variable and check if empty and then redirect output
    rofi -dmenu -theme ${set_system_hostname_theme} 1> /etc/hostname;
}

# OPTION 6
function access_point() {
    # Create an access point for any interface to share your connection
    ap_option_1="Access Point with No Passphrase (Open Network)";
    ap_option_2="WPA + WPA2 Passphrase";
    ap_option_3="Access Point without Internet Sharing";
    ap_option_4="Bridged Internet Sharing";
    ap_option_5="Bridged Internet Sharing (Pre-configured Bridge Interface)";
    ap_option_6="Internet Sharing from the same Wifi Interface";

    ap_menu="$(echo -e "$ap_option_1\n$ap_option_2\n$ap_option_3\n$ap_option_4\n$ap_option_5\n$ap_option_6" | rofi -dmenu -theme ${access_points_theme})";
    ls /tmp/create_ap*

    case "${ap_menu}" in

        $ap_option_1)

            first_interface="$(echo "${wireless_interfaces[@]} ${wireless_adapter_interfaces[@]}" | tr " " "\n" | rofi -dmenu -theme ${access_points_theme})";
            second_interface="$(echo "${wireless_interfaces[@]} ${wireless_adapter_interfaces[@]}" | tr " " "\n" | rofi -dmenu -theme ${access_points_theme})";
            access_point_name="$(rofi -dmenu -theme ${access_point_name_theme})";
            create_ap ${first_interface} ${second_interface} ${access_point_name} 2>&1 | grep "ERROR"
            #&>/dev/null && disown 2>/dev/null;
            if [ $? -eq 0 ]; then
                dbus-launch notify-send "${access_point_name}" -i "${icons}/network-wireless-connected-100.svg" 'Access Point created successfully';
            else
                create_ap --no-virt ${first_interface} ${second_interface} ${access_point_name} &>/dev/null && disown 2>/dev/null;
                if [ $? -eq 1 ]; then
                    dbus-launch notify-send "${access_point_name}" -i "${icons}/network-wireless-connected-100.svg" 'Access Point association failed';
                fi
            fi
        ;;

        $ap_option_2)
            echo "${ap_menu}"
        ;;
        $ap_option_3)
            echo "${ap_menu}"
        ;;
        $ap_option_4)
            echo "${ap_menu}"
        ;;
        $ap_option_5)
            echo "${ap_menu}"
        ;;
        $ap_option_6)
            echo "${ap_menu}"
        ;;
    esac

    }

# OPTION 7
function list_ports() {
    # List ports
    echo -e "Open Ports\nListening Ports\nClosed Ports" | rofi -dmenu -theme ${main_theme};
}

# OPTION 8
function list_add_delete_neighbours() {
    # Show neighbours and add close IPs optionally
    ip neigh | rofi -dmenu -theme ${list_add_delete_neighbours_theme};
}

# OPTION 9
function list_all_available_interfaces() {
    tcpdump --list-interface | rofi -dmenu -theme ${main_theme} 1>/dev/null;
}

# OPTION 10
function ssh_launcher() {

    ssh_option_1="Password Authentication";
    ssh_option_2="Public Key Authentication"
    #ssh_option_=""
    #ssh_option_=""
    ssh_menu="$(echo -e "$ssh_option_1\n$ssh_option_2" | rofi -dmenu -theme ${ssh_launcher_theme})";

    case "${ssh_menu}" in

        $ssh_option_1)

            local user="$(rofi -dmenu -theme ${ssh_launcher_user_theme})";
            local destination="$(rofi -dmenu -theme ${ssh_launcher_destination_theme})";
            local password="$(rofi -dmenu -password -theme ${ssh_launcher_password_theme} 2>/dev/null)";
            local default_port="Default port (22)";
            local prompt_port="$(echo -e "$default_port\nSpecify a port number" | rofi -window-title "Do you want to use the default port?" -dmenu -theme ${ssh_launcher_theme})";
            case "${prompt_port}" in
                $default_port)
                    sshpass -p "${password}" ssh "${user}@${destination}";
                ;;
                "Specify a port number")
                    local specified_port="$(rofi -dmenu -theme ${ssh_launcher_port_theme})";
                    sshpass -p "${password}" ssh "${user}@${destination} -p ${specified_port}";
                    exec "$0";
                ;;
                *)
                    exec "$0";
                ;;
            esac
        ;;

        $ssh_option_2)

            local user="$(rofi -dmenu -theme ${ssh_launcher_user_theme})";
            local destination="$(rofi -dmenu -theme ${ssh_launcher_destination_theme})";
            local identity_file="$(rofi window-title "Specify the path of the identity file" -dmenu -theme ${ssh_launcher_theme})";
            local default_port="Default port (22)";
            local prompt_port="$(echo -e "$default_port\nSpecify a port number" | rofi -window-title "Do you want to use the default port?" -dmenu -theme ${ssh_launcher_theme})";
            case "${prompt_port}" in
                $default_port)
                    ssh -i "${identity_file}" "${user}@${destination}";
                    exec "$0";
                ;;
                "Specify a port number")
                    local specified_port="$(rofi -dmenu -theme ${ssh_launcher_port_theme})";
                    ssh -i "${identity_file}" "${user}@${destination} -p ${specified_port}";
                    exec "$0";
                ;;
                *)
                    exec "$0";
                ;;
            esac
        ;;
    esac
}

chosen="$(menu)";
case "${chosen}" in

    $option_1)

        ssid="$(edit_connection)";

        case "${ssid}" in

            *Back*)
                exec "$0";
            ;;

            "***** Wired *****")
                edit_connection;
            ;;

            "***** Wireless *****")
                edit_connection;
            ;;

            *Add*)

                network_type="$(edit_connection_add)";
                case "${network_type}" in

                    "DSL")

                        echo 1;

                    ;;

                    "Ethernet")

                        echo 2;

                    ;;

                    "InfiniBand")

                        echo 3;

                    ;;

                    "Wi-Fi")

                        echo 4;

                    ;;

                    "Bond")

                        echo 5;

                    ;;

                    "Bridge")

                        echo 6;

                    ;;

                    "IP Tunnel")

                        echo 7;

                    ;;

                    "Team")

                        echo 8;

                    ;;

                    "Veth")

                        echo 9;

                    ;;

                    "VLAN")

                        echo 10;

                    ;;

                    "WireGuard")

                        echo 11;

                    ;;

                    "<Cancel>")
                        exec "$0";
                    ;;

                esac

            ;;

            *)  # Check if any other button,key or unknown option is selected
                if [[ -z "${ssid}" ]]; then
                    # If so, go back
                    exec "$0";

                else

                    option="$(echo -e "<Edit Connection>\n<Delete>\n<Back>" | rofi -dmenu -theme ${edit_connection_theme})";

                    case "${option}" in

                        *Back*)

                            exec "$0";

                        ;;

                        *Edit*)

                            ethernet=($(sed -n '/Wired/,/Wireless/p' /var/lib/PhynetManager/edit_connection));
                            profile_name="${ssid}";
                            used_wired_interface="$(ip -br l | awk '$1 !~ "lo|vir|wl" { print $1}')";
                            device="${used_wired_interface} $(cat /sys/class/net/${used_wired_interface}/address)";
                            cloned_mac_address=""; mtu=""; ipv4_conf="<Automatic>"; addresses_ipv4="<Add...>";
                            gateway_ipv4=""; dns_servers_ipv4="<Add...>"; search_domains_ipv4="<Add...>"; routing_ipv4="(No customm rules)";
                            ipv6_conf="<Automatic>"; addresses_ipv6="<Add...>";gateway_ipv6=""; dns_servers_ipv6="<Add...>";
                            search_domains_ipv6="<Add...>"; routing_ipv6="(No customm rules)";

                            if [[ "${used_wired_interface}" =~ "${wired_interfaces[@]}" ]]; then

                                echo -e "Profile Name: ${profile_name}\nDevice:${device}\nClone MAC Address:\nMTU:${mtu}\nIPv4 CONFIGURATION ${ipv4_conf}\n<Hide>\nAddresses ${addresses}\nGateway:${gateway}\nDNS Servers ${dns_servers}\nSearch domains: ${search_domains}\nRouting: ${routing}\n<Edit>\n[ ] Never use this network for default route\n [ ] Ignore automatically obtained routes\n[ ] Ignore automatically obtained DNS parameters\n[ ] Require IPv4 addressing for this connection\nIPv6 CONFIGURATION ${ipv6_conf}\n<Hide>\nAddresses ${addresses_ipv6}\nGateway:${gateway_ipv6}\nDNS Servers ${dns_servers_ipv6}\nSearch domains: ${search_domains_ipv6}\nRouting: ${routing_ipv6}\n<Edit>\n[ ] Never use this network for default route\n [ ] Ignore automatically obtained routes\n[ ] Ignore automatically obtained DNS parameters\n[ ] Require IPv6 addressing for this connection\n[X] Automatically connect\n[X] Available to all users\n<OK>\n<Cancel>" | rofi -dmenu -theme ${edit_connection_theme};

                            fi

                            exec "$0";

                        ;;

                        *Delete*)

                            prompt="$(echo -e "Yes\nNo" | rofi -window-title "Are you sure?" -dmenu -theme ${edit_connection_theme})";

                            case ${prompt} in

                                "Yes")

                                    echo "edit_connection_delete function";
                                    exec "$0";

                                ;;

                                "No")

                                    exec "$0";

                                ;;

                            esac

                        ;;

                    esac


                fi

            ;;

        esac

        exec "$0";

    ;;

    $option_2)

        ssid="$(activate_connection)";
        ac_ssid="$(echo ${ssid} | awk -F 'Interface:' '{print $1}' | xargs)";
        ac_interface="$(echo ${ssid} | awk -F 'Interface:' '{print $2}' | xargs)";


        case "${ssid}" in

             *Back*)

                exec "$0";

            ;;

            "***** Wired *****")

                activate_connection;

            ;;

            "***** Wi-Fi *****")

                activate_connection;

            ;;

            *USB*)

                activate_connection;

            ;;

            *Connected:*) # Activated connection

                operation="$(echo -e "Deactivate\nBack" | rofi -dmenu -theme ${activate_connection_theme})";

                case ${operation} in

                    "Back")

                        exec "$0";

                    ;;

                    "Deactivate")

                        prompt="$(echo -e "Yes\nNo" | rofi -window-title "Are you sure?" -dmenu -theme ${activate_connection_theme})";

                        case ${prompt} in

                            "Yes")
                                #killall wpa_supplicant 2>/dev/null;
                                deactivate_pid="$(ps aux | grep wpa_supplicant | grep ${ac_interface} | awk '{print $2}')";
                                kill $deactivate_pid;
                                dbus-launch notify-send "$(echo ${ssid} | grep -oP '(?<=Connected:)\w+')" -i "${icons}/network-wireless-connected-100.svg" "Disconnected connection";
                                 exec "$0";

                            ;;

                            "No")

                                exec "$0";

                            ;;

                        esac

                        exec "$0";

                    ;;

                esac

                exec "$0";

            ;;

            *)  # Check if any other button,key or unknown option is selected
                if [[ -z "${ssid}" ]]; then
                    # If so, go back
                    exec "$0";

                else
                                        # Check if it's in /etc/PhynetManager/system-connections/
                    case `grep -r "ssid=${ac_ssid}" "${system_connections_folder}" >/dev/null; echo $?` in

                        0)  # In /etc/PhynetManager/system-connections/
                            # Check if ssid in /etc/wpa_supplicant/
                            case `grep -r "ssid=\"${ac_ssid}\"" "/etc/wpa_supplicant" >/dev/null; echo $?` in

                                0)  # In /etc/wpa_supplicant/
                                    WPA_CONF_FILE="$(grep -r "${ac_ssid}" "/etc/wpa_supplicant" | cut -d ':' -f1)";
                                    wpa_supplicant -B -i "${ac_interface}" -c "${WPA_CONF_FILE}" &>/dev/null && disown &>/dev/null;
                                    dhclient "${ac_interface}" 2>/dev/null;
                                    dbus-launch notify-send "${ac_ssid}" -i "${icons}/network-wireless-connected-100.svg" 'Connection Successful';
                                    # Return to main menu after connection
                                    exec "$0";
                                ;;

                                1)  #Not in /etc/wpa_supplicant/
                                    ssid_path="$(grep -r "ssid=${ac_ssid}" "${system_connections_folder}" | cut -d ':' -f1)"};
                                    psk="$(grep "psk=" "${ssid_path}" | cut -d '=' -f2)";
                                    NEW_WPA_CONF_FILE="$(mktemp -q "/etc/wpa_supplicant/wpa_supplicant_${ac_ssid}_XXXXXXXXX_PhynetManager.conf")";
                                    wpa_passphrase "${ac_ssid}" "${psk}" > "${NEW_WPA_CONF_FILE}";
                                    wpa_supplicant -B -i "${ac_interface}" -c "${NEW_WPA_CONF_FILE}" &>/dev/null;
                                    dhclient "${system_connection_interface}" &>/dev/null;
                                    exec "$0";
                                ;;

                            esac

                        ;;

                        1)  # Not in /etc/PhynetManager/system-connections/
                            # Network not found (Creating new one)
                            psk="$(rofi -dmenu -password -theme ${activate_connection_password_theme} 2>/dev/null)";
                            # Check for interruption or mid cancel
                            if [ $? -eq 1 ]; then

                                exec "$0";

                            fi

                            NEW_WPA_CONF_FILE="$(mktemp -q "/etc/wpa_supplicant/wpa_supplicant_${ac_ssid}_XXXXXXXXX_PhynetManager.conf")";
                            wpa_passphrase "${ac_ssid}" "${psk}" > "${NEW_WPA_CONF_FILE}";
                            ip link set "${ac_interface}" up;
                            wpa_supplicant -B -i "${ac_interface}" -c "${NEW_WPA_CONF_FILE}" 2>/dev/null;
                            # If user enters wrong password or any error occurs
                            if [ $? -eq 1 ]; then
                                dbus-launch notify-send "${ssid}" -i "${ac_ssid}/network-wireless-connected-100.svg" "Wrong password";
                                rm -rf ${NEW_WPA_CONF_FILE};
                                exec "$0";

                            fi

                            dhclient ${ac_interface};
                            dbus-launch notify-send "${ssid}" -i "${ac_ssid}/network-wireless-connected-100.svg" "Connection Successful";
                            # Add to system-connections (/etc/PhynetManager/system-connections)
                            exec "$0";

                        ;;

                         *) # Network error, unwanted action or user error
                            dbus-launch notify-send "Connection Error:" -i "${ac_ssid}/network-wireless-connected-100.svg" "Please try again with right informations";
                            exec "$0";

                        ;;

                    esac

                fi

            ;;

        esac

        exec "$0";

    ;;

     $option_3)
        manually_activate_connection;
        exec "$0";
    ;;

    $option_4)
        connect_with_QR_Code;
        exec "$0";
    ;;

    $option_5)
        set_system_hostname;
        exec "$0";
    ;;

    $option_6)
        access_point;
        exec "$0";
    ;;

     $option_7)
        list_ports;
        exec "$0";
    ;;

    $option_8)
        list_add_delete_neighbours;
        exec "$0";
    ;;

    $option_9)
        list_all_available_interfaces;
        exec "$0";
    ;;

    $option_10)
        ssh_launcher;
        exec "$0";
    ;;

    $option_11)
        exit 0;
    ;;

esac

# Done(In Binary:01000100 01101111 01101110 01100101).It's a joke(No it's not). :)
